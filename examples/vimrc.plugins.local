" vim: set ts=2 sw=2 et fdm=marker:

Plug 'vimwiki/vimwiki'  " Personal wiki
Plug 'tpope/vim-scriptease'  " Open help for vimscript word under cursor with K
Plug 'tpope/vim-fugitive'  " Git commands
Plug 'sheerun/vim-polyglot'  " Language pack
Plug 'Chiel92/vim-autoformat'  " Integrate external file formatters
Plug 'scrooloose/syntastic'  " Integrate external linters / syntax checkers
Plug 'vim-airline/vim-airline'  " Fancy status line
Plug 'vim-airline/vim-airline-themes'  " Fancy status line themes
Plug 'easymotion/vim-easymotion'  " Jump to any character on screen with \\s
"Plug 'rhysd/clever-f.vim'  " Jump to 'a' by pressing fa and keep pressing f to go to the next occurrence. Use ; and , instead
"Plug 'ludovicchabant/vim-gutentags'  " Automatically generate tags
Plug 'majutsushi/tagbar'  " Show file structure/tags
Plug 'junegunn/goyo.vim'  " Distraction-free writing with :Goyo
Plug 'lucc/vim-tip'  " Tip of the day
"Plug 'vim-scripts/YankRing.vim'

Plug 'jceb/vim-orgmode'  " emacs orgmode for vim
Plug 'vim-scripts/utl.vim'  " Universal Text Linking - dependency of vim-orgmode
Plug 'tpope/vim-speeddating'  " Increment dates - dependency of vim-orgmode
Plug 'inkarkat/vim-SyntaxRange'  " Support syntax regions - dependency of vim-orgmode

"Plug 'vim-scripts/ZoomWin' " git clone --config transfer.fsckObjects=false 'https://github.com/vim-scripts/ZoomWin.git' ~/.vim/bundle/ZoomWin

" Version control gutter info
" Pick one:
Plug 'airblade/vim-gitgutter'
"Plug 'mhinz/vim-signify'  " Signify has to save the file automatically to work (yuck)

" Autocomplete brackets
" Pick one:
"Plug 'jiangmiao/auto-pairs'
"Plug 'raimondi/delimitmate'

" Fuzzy searching
" Pick one:
"Plug 'ctrlpvim/ctrlp.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' } | Plug 'junegunn/fzf.vim'

" File manager
" Pick one:
"Plug 'scrooloose/nerdtree'  " - to open and close, q to close
"Plug 'justinmk/vim-dirvish'  " - to open, q to close *
Plug 'jeetsukumaran/vim-filebeagle'  " - to open, q to close
"Plug 'Shougo/vimproc.vim', {'do' : 'make'} | Plug 'Shougo/unite.vim' | Plug 'Shougo/vimfiler.vim'  " - to open and close
"Plug 'tpope/vim-vinegar'  " - to open, q to close

if has_key(g:plugs, 'nerdtree')
  Plug 'Xuyuanp/nerdtree-git-plugin'
endif

" Languages
Plug 'jdonaldson/vaxe'
Plug 'pangloss/vim-javascript'
"Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }  " Improved JavaScript omni completion
Plug 'fatih/vim-go'
Plug 'dlwicksell/axiom', {'rtp': 'vim'}

" Completion
" Pick one:
"Plug 'Rip-Rip/clang_complete'
"Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'ervandew/supertab'
"Plug 'Shougo/neocomplete.vim'

" Warning: >60MB download!
"Plug 'vim-ctrlspace/vim-ctrlspace'


"
" Press zR to open all folds and zM to close all folds
" Press zo to open one fold and zc to close one fold
"

" delimitmate {{{1
if has_key(g:plugs, 'delimitmate')
  " delimitMate has a bug - writes gargage when pressing enter at the end of
  " augroup lines
  let delimitMate_autoclose = 1
  let delimitMate_expand_space = 1
  let delimitMate_expand_cr = 1
  let delimitMate_excluded_regions = 'Comment,String'
  augroup delimitMate_vim_quotes
    autocmd!
    autocmd FileType vim let b:delimitMate_quotes = "' `"
  augroup END
endif

" auto-pairs {{{1
if has_key(g:plugs, 'auto-pairs')
  augroup auto_pairs_vim_auotes
    autocmd!
    autocmd Filetype vim let b:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'", '`':'`'}
  augroup END
endif

" file manager: nerdtree {{{1
if has_key(g:plugs, 'nerdtree')
  nnoremap - :NERDTreeToggle<CR>
  "nnoremap <silent> - :NERDTreeFind<CR>
  let NERDTreeQuitOnOpen = 1
  let NERDTreeHijackNetrw = 1
  augroup ProjectDrawer
    autocmd!
    autocmd StdinReadPre * let s:std_in=1
    "autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
    autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
  augroup END
endif

" file manager: vim-dirvish {{{1
if has_key(g:plugs, 'vim-dirvish')
  let g:dirvish_mode = ':sort r /\/$/'
  augroup override_noautochdir
    au VimEnter * set noautochdir  " Required by vim-dirvish
  augroup END
endif

" file manager: vimfiler {{{1
if has_key(g:plugs, 'vimfiler.vim')
  nnoremap - :VimFilerBufferDir<CR>
  augroup override_noautochdir
    au VimEnter * set noautochdir  " Required by vimfiler
  augroup END
  let g:vimfiler_as_default_explorer = 1
endif

" file manager: vim-vinegar {{{1
if has_key(g:plugs, 'vim-vinegar')
  augroup netrw_custom_close
    autocmd!
    autocmd filetype netrw call s:netrw_custom_close()
  augroup END
  function! s:netrw_custom_close()
    noremap <buffer> q :Rexplore<CR>
  endfunction
endif

" vim-ctrlspace {{{1
if has_key(g:plugs, 'vim-ctrlspace')
  set hidden  " Required by ctrlspace
endif

" vim-airline {{{1
" Setting a theme is required for vi to exit 0 if you don't
" add the vim-airline-themes plugin. Otherwise, git commands fail.
if !has_key(g:plugs, 'vim-airline-themes')
  let g:airline_theme = 'dark'
endif
let g:airline#extensions#tabline#enabled = 1

" vim-javascript {{{1
let g:javascript_plugin_jsdoc = 1

" Signify {{{1
let g:signify_vcs_list = ['git', 'svn', 'hg']
let g:signify_sign_change = '~'
let g:signify_realtime = 1

" fuzzy searching: fzf {{{1
if has_key(g:plugs, 'fzf')
  nnoremap <C-p> :FZF<CR>
endif

" fuzzy searching: ctrlp {{{1
if has_key(g:plugs, 'ctrlp.vim')
  let g:ctrlp_map = '<c-p>'
  let g:ctrlp_cmd = 'CtrlP'
  let g:ctrlp_working_path_mode = 'ra'
endif

" YouCompleteMe {{{1
if has_key(g:plugs, 'YouCompleteMe')
  function! BuildYCM(info)
    " info is a dictionary with 3 fields
    " - name:   name of the plugin
    " - status: 'installed', 'updated', or 'unchanged'
    " - force:  set on PlugInstall! or PlugUpdate!
    if a:info.status == 'installed' || a:info.force
      !./install.py
      "!./install.py --tern-completer
    endif
  endfunction
endif

" clang_complete {{{1
let g:clang_use_library = 1
if g:uname == 'Darwin'
  let g:clang_library_path = '/Library/Developer/CommandLineTools/usr/lib/'
else
  let g:clang_library_path = '/usr/lib/clang'
endif
let g:clang_complete_copen = 1
let g:clang_complete_macros = 1
let g:clang_auto_select=1
let g:clang_hl_errors = 1

" neocomplete {{{1
"let g:neocomplete#enable_at_startup = 1 " always load neocomplete
"let g:neocomplcache_enable_auto_select = 1 " auto-popup!
"if !exists('g:neocomplcache_omni_patterns')
"  let g:neocomplcache_omni_patterns = {} " set a default pattern dict
"endif
"" try for completions after '.', '(', etc.
"let g:neocomplcache_omni_patterns.haxe = '\v([\]''"\)]|\w|(^\s*))(\.|\()'

" vaxe {{{1
let g:vaxe_completion_write_compiler_ouput = 1

" syntastic {{{1
if has_key(g:plugs, 'syntastic')
  let g:syntastic_check_on_open = 1
  let g:syntastic_enable_signs = 1
endif

" axiom {{{1
if has_key(g:plugs, 'axiom')
  let g:filetype_m = 'mumps'
endif

