#!/bin/bash

[[ "$-" = *i* ]] || return

[[ -z "${ORIGINAL_VARS}" ]] && ORIGINAL_VARS="$(declare -px)"
typeset +x ORIGINAL_VARS
[[ -n "${FIXPATH}" ]] && PATH="$FIXPATH" && unset FIXPATH

# Don't add these commands to the history
HISTIGNORE="&:[ ]*:ls:bg:fg:exit:reset:clear:which"

# Avoid duplicate history entries
HISTCONTROL="ignoreboth:erasedups"

# Huge history. Doesn't appear to slow things down, so why not?
HISTSIZE=9999999999
HISTFILESIZE=9999999999

# Use standard ISO 8601 timestamp
# %F equivalent to %Y-%m-%d
# %T equivalent to %H:%M:%S (24-hours format)
HISTTIMEFORMAT='%F %T '

# Save multi-line commands as one command
shopt -s cmdhist

# Append to the history file, don't overwrite it
shopt -s histappend

# Disable ^s and ^q
stty -ixon -ixoff
bind -r '\C-s'
bind -r '\C-q'

# Turn on recursive globbing (enables ** to recurse all directories)
# Requires Bash >= 4
shopt -s globstar 2> /dev/null

# Not set because having cd be in front of every directory change is useful for searching history
# cd to a directory by typing just the directory
# Requires Bash >= 4
#shopt -s autocd 2> /dev/null

# This defines where cd looks for targets
# Add the directories you want to have fast access to, separated by colon
# Ex: CDPATH=".:~:~/projects" will look for targets in the current working directory, in home and in the ~/projects folder
# If CDPATH is used to cd, then cd will echo the destination
#CDPATH="~"

# Not set because I don't want it set in zsh and I want consistency
# cd to variables; with foo=~/code/foo, `cd foo` works from any folder that doesn't contain its own foo folder
#shopt -s cdable_vars
#dotfiles="$HOME/.config/dotfiles"

setup_completion() {
    if [[ -f /usr/share/git/completion/git-completion.bash ]]; then
        . /usr/share/git/completion/git-completion.bash
    elif [[ -f /usr/local/share/git/completion/git-completion.bash ]]; then
        . /usr/local/share/git/completion/git-completion.bash
    elif [[ -f /usr/share/bash-completion/completions/git ]]; then
        . /usr/share/bash-completion/completions/git
    elif [[ -f /usr/local/share/bash-completion/completions/git ]]; then
        . /usr/local/share/bash-completion/completions/git
    elif [[ -f /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash ]]; then
        . /Library/Developer/CommandLineTools/usr/share/git-core/git-completion.bash
    fi
}
setup_completion && unset -f setup_completion

# mkdir then cd
mkcd() {
    mkdir -p "$1" && builtin cd "$1"
}

# mv then cd to destination
mvcd() {
    (( $# > 1 )) && [[ -d "${@: -1}" ]] && mv "$@" && builtin cd "${@: -1}"
}

# enable cd to directory containing file; cd :/ to visit git root
# cd ..../ becomes ../../../ - every . after the first 2 goes up another directory
cd() {
    local top parent
    [[ "$#" -eq 0 ]] && set_iterm_tab_rgb
    { [[ "$1" = ":/" ]] && top="$(command git rev-parse --show-cdup)." && builtin cd "$top"; } || \
    { [[ ! -d "$1" ]] && [[ -e "$1" ]] && parent="$(dirname "$1")" && [[ "$parent" != . ]] && [[ -d "$parent" ]] && builtin cd "$parent" 2>/dev/null; } || \
    { [[ "$1" = '...'* ]] && command -v perl &>/dev/null && builtin cd "$(printf %s "$1" | perl -pe 's/\/(.*$)|(\.)(?=\.\.)/$2$2\/$1/g')" } || \
    builtin cd "$@"
}

# move a to b and b to a
swap() {
    [[ "$#" -ne 2 ]] && { echo >&2 '2 paths must be supplied'; return 1; }
    { [[ -e "$1" ]] || [[ -e "$2" ]]; } || { echo >&2 'Neither file exists'; return 1; }
    [[ "$1" = "$2" ]] && { echo >&2 "Can't swap file to itself"; return 1; }
    if [[ -e "$1" ]] && [[ -e "$2" ]]; then
        [[ -e "$1.$$" ]] && { echo >&2 'Swap temp file already exists. Aborting'; return 1; }
        mv "$1" "$1.$$" &&
        mv "$2" "$1" &&
        mv "$1.$$" "$2"
    elif [[ -e "$1" ]]; then
        mv "$1" "$2"
    elif [[ -e "$2" ]]; then
        mv "$2" "$1"
    fi
}

unalias which &>/dev/null  # Prevent system-wide which alias from breaking the which function
# When which output is a file, ls -l the file (bash-specific version)
which() {
    { [[ -t 0 ]] && [[ -t 1 ]]; } || { command which "$@"; return; }
    local which_out which_exit
    which_out="$(builtin type "$@")"
    which_exit="$?"
    [[ -z "$which_out" ]] && return "$which_exit"
    printf '%s\n' "$which_out" | while IFS=$'\n' read -r line; do
        if [[ "$line" = *" is /"* ]] && [[ -x "${line/#* is /}" ]]; then
            printf '%s' "${line%% is *} is "
            # eval to use ls alias with color flag. Aliases only work if set before function definition
            eval "ls -la $(printf %q "${line/#* is /}")"
        else
            printf '%s\n' "$line"
        fi
    done
    return "$which_exit"
}

# Add custom git extensions
git() {
    local code
    # Add git checkout -i flag
    if [[ "$1" = "checkout" ]] && [[ "$2" = "-i"* ]]; then
        git-checkout-i "$@"; return
    fi
    # Set default format for git stash list
    if [[ "$1" = "stash" ]] && [[ "$2" = "list" ]]; then
        shift;shift;
        command git stash list --format='%C(auto)%h %gd %C(dim red)[%C(reset)%C(red)%cr%C(dim red)]%C(reset) %C(auto)%<(70,trunc)%s %C(dim cyan)<%C(reset)%C(cyan)%an%C(dim cyan)>%C(reset)' "$@"
        return
    fi
    # Truncate long lines in git grep
    if [[ "$1" = "grep" ]]; then
        if ! command -v perl &>/dev/null; then
            command git "$@"
            return
        fi
        command git -c color.ui=always "$@" | perl -pe 'my $truncate = 500; (my $blank = $_) =~ s/\e\[[^m]*m//g; if (length $blank > $truncate) {
            s/^((?:\e\[[^m]*m(?:.|$)|.(?:\e\[m)?|$(*SKIP)(*FAIL)){$truncate})(?=(?:\e\[[^m]*m(?:.|$)|.(?:\e\[m)?|$(*SKIP)(*FAIL)){15}).*/$1\e\[m...(truncated)/
        }'
        return
    fi
    # Prevent accidental git commit -a
    if [[ "$1" = "commit" ]] && [[ "$2" = "-a"* ]]; then
        if ! command git diff-index --cached --quiet HEAD -- && \
            ! command git diff-files --quiet; then
            echo >&2 $'\e[0;31mERROR!\e[0m Changes are already staged. Preventing git commit -a'
            echo >&2 $'\e[0;31mERROR!\e[0m Run git commit without -a or run git reset HEAD first'
            return 1
        fi
    fi
    command git "$@"
    code="$?"
    if [[ "$1" = "commit" ]] && (( ! code )); then
        printf 'Commit subject length: '
        command git log -1 --format="%s" | tr -d '\n' | wc -m | awk '{print $1}'
    fi
    return "$code"
}

# Interactively check out git branches
git-checkout-i() {
    local fzf one refs cmd format branches line_count term_height fzf_height fzf_tmux branch checkout_command
    command git rev-parse || return
    fzf="$(command -v fzf)"
    [[ -z "$fzf" ]] && [[ -x ~/.fzf/bin/fzf ]] && fzf=~/.fzf/bin/fzf
    if [[ -z "$fzf" ]]; then
        printf >&2 '\e[0;31mgit checkout -i requires fzf to be installed\e[0m\n'
        return 1
    fi
    fzf_tmux="$(command -v fzf-tmux)"
    [[ -z "$fzf_tmux" ]] && [[ -x ~/.fzf/bin/fzf-tmux ]] && fzf_tmux=~/.fzf/bin/fzf-tmux

    shift
    one="${1/#-i/-}"; shift; [[ "$one" != "-" ]] && set -- "$one" "$@"
    case "$1" in
        -h | --help)
            printf >&2 'Usage:\n  git checkout -i [-a] [TAIL_ARGS...]\n  git checkout -i -h\n\n'
            printf >&2 'Press enter to select a branch to check out.\nThe selected branch to check out will be added to history.\n\n'
            printf >&2 'Arguments:\n  -i: Interactive checkout\n  -a: Include non-local refs\n  TAIL_ARGS: Arguments passed to tail to limit checkout choices\n  -h: This message\n\n'
            printf >&2 'Examples:\n  git checkout -i\n  git checkout -ia\n  git checkout -i -a -10\n  git checkout -ia10\n'
            return;;
        -a) refs="--"; shift;;
        -a*) refs="--"; one="${1/#-a/-}"; shift; set -- "$one" "$@";;
        *) refs="refs/heads/"; one="${1/#-i/-}"; [[ "$#" -gt 0 ]] && shift && [[ "$one" != "-" ]] && set -- "$one" "$@";;
    esac
    # old git for-each-ref does not accept --color flag, new git for-each-ref only accepts --color flag
    command git for-each-ref --color --count=1 &>/dev/null && cmd=( command git for-each-ref --color ) || cmd=( command git -c color.ui=always for-each-ref )
    format="--format=%(refname) %00%(committerdate:format:%s)%(taggerdate:format:%s) %(color:red)%(committerdate:relative)%(taggerdate:relative)%(color:reset)%09%00%(color:yellow)%(refname:short)%(color:reset) %00%(subject)%00 %(color:reset)%(color:dim cyan)<%(color:reset)%(color:cyan)%(authorname)%(taggername)%(color:reset)%(color:dim cyan)>%(color:reset)"
    branches="$("${cmd[@]}" "$format" "$refs" |
        perl -ne 'next if /^refs\/stash /; s/^refs\/tags\/[^\x00]*\x00([^\x00]*)\x00([^\x00]*)/\1(tag) \2/ || s/^[^\x00]*\x00([^\x00]*)\x00/$1/; s/\x00([^\x00]{0,50})([^\x00]*)\x00/$1\x1b[1;30m$2\x1b[0m/; print' |
        sort -n -k1,1 | cut -d" " -f2- | tail "${@:--n+0}")" &&
        line_count=$(( $(wc -l <<< "$branches") )) &&
        term_height=$(tput lines) &&
        fzf_height=$(( line_count + 2 < term_height / 2 ? line_count + 2 : term_height / 2 )) &&
        { [[ -n "$fzf_tmux" ]] && fzf_cmd=("$fzf_tmux" -d "$fzf_height" --) || fzf_cmd=("$fzf"); } &&
        branch=$(echo "$branches" |
        "${fzf_cmd[@]}" --no-multi --reverse --tac --ansi --no-sort --height="$fzf_height") &&
        branch="$(echo "$branch" | REMOTES="$(command git remote)" perl -pe 's/\x1b\[[0-9;]*m//g; s/^([^\t]*\t)\(tag\) (.*)$/$1refs\/tags\/$2/; s/^[^\t]*\t([^ ]*).*$/$1/; my @remotes = split /\n/, $ENV{REMOTES}; foreach my $remote (@remotes) { s/^$remote\///; }')" &&
        checkout_command="$(printf 'git checkout %q\n' "$branch")" &&
        echo "$checkout_command" &&
        { { builtin history -a && builtin history -s "git checkout -i" && builtin history -s "$checkout_command" && builtin history -a; } &>/dev/null ||
            builtin print -S "$checkout_command" &>/dev/null ||
            echo "Could not save git checkout command to history"; } &&
        command git checkout "$branch"
}

set_iterm_tab_rgb() {
    [[ "$TERM_PROGRAM" != "iTerm.app" ]] && return
    [[ -n "${NO_ITERM_TAB_COLOR+set}" ]] && return
    if [[ "$#" -eq 0 ]]; then
        printf "\e]6;1;bg;*;default\a"  # reset
    else
        printf "\e]6;1;bg;red;brightness;%s\a\e]6;1;bg;green;brightness;%s\a\e]6;1;bg;blue;brightness;%s\a" "$1" "$2" "$3"
    fi
}

work_on_repository() {
    local main_command='
        cd ~/code/'"$1"'/product
        . ../infrastructure/set.env.sh'
    if [[ "$2" == 'here' ]]; then
        eval "$main_command"
        return
    fi
    # set.env.sh borks out if run twice, so reset the environment
    # assume it's a login shell for now
    # OS X messes with the path in /etc/profile and /etc/zprofile. FIXPATH works around this
    exec env -i ORIGINAL_VARS="$ORIGINAL_VARS" "$(command -v bash)" --noprofile -c '
        eval "$ORIGINAL_VARS"
        '"$main_command"'
        FIXPATH="$PATH" exec $(command -v bash) -l'
}

apply_aliases() {
    # ls
    if [[ "$OSTYPE" == "darwin"* ]]; then
        export CLICOLOR=1
        export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
        alias ls="ls -Gp"
    fi
    if [[ "$OSTYPE" != "darwin"* ]]; then
        command -v xdg-open &>/dev/null && alias open="xdg-open"
    fi
    if [[ "$OSTYPE" == "linux-gnu" ]]; then
        alias ls="ls --color=auto -p"
        if uname -a | grep -q Microsoft; then
            # wsl
            alias pbcopy='clip.exe'
            alias pbpaste='powershell.exe Get-Clipboard'
        else
            alias pbcopy='xsel --clipboard --input'
            alias pbpaste='xsel --clipboard --output'
        fi
    fi
    if [[ "$OSTYPE" == "cygwin" ]]; then
        alias ls="ls --color=auto -p"
        #alias pbcopy='clip'
        alias pbcopy='dd of=/dev/clipboard status=none'
        alias pbpaste='dd if=/dev/clipboard status=none'
    fi
    alias l="ls"
    alias la="ls -a"
    alias ll="ls -la"
    alias lr="ls -R"
    alias lz="ls -rS"  # sort by size
    alias lt="ls -rT"  # sort by timestamp
    alias lathr="ls -lathr"
    alias althr="ls -lathr"

    # modified commands
    command -v gtar &>/dev/null && alias tar="gtar"
    command -v colordiff &>/dev/null && alias diff="colordiff"
    command -v wget &>/dev/null && ! command wget --help 2>&1 | head -1 | grep -q BusyBox && alias wget="wget --content-disposition"
    command -v pygmentize &>/dev/null && alias ccat="pygmentize -g"  # pip install Pygments
    alias more="less"
    alias df="df -h"
    alias du="du -ch"

    alias tmux='tmux -2'
}
apply_aliases && unset -f apply_aliases

if command -v lesspipe &>/dev/null; then
    export LESSOPEN="|lesspipe %s" LESS_ADVANCED_PREPROCESSOR=1
elif command -v lesspipe.sh &>/dev/null; then
    export LESSOPEN="|lesspipe.sh %s" LESS_ADVANCED_PREPROCESSOR=1
fi

command -v direnv &>/dev/null && eval "$(direnv hook bash)"

pws() {
    # /usr/local/bin -> /u/l/bin
    # ~/code/srv/src -> ~/c/s/src
    # Edge case: ~/._.foo/bar -> ~/._.f/b
    pwd | awk -F / -v home="$HOME" '{
        if (substr($0, 1, length(home)) == home) {
            $0 = "~" substr($0, length(home) + 1)
        }
        for (i = 1; i < NF; i++) {
            match($i, /^[._]*./)
            printf "%s/", substr($i, RSTART, RLENGTH)
        }
        print $NF
    }'

    #pwd | perl -ne '
    #    s/^\Q$ENV{HOME}\E/~/;
    #    my @dirs = split m{/};
    #    my $basename = pop @dirs;
    #    foreach (@dirs) {
    #        print /^([._]*.)/, q{/};
    #    }
    #    print $basename;
    #'

    #pwd|perl -pe 's|^\Q$ENV{HOME}\E|~|;s|(?<=/)([._]*.)[^/]*(?=/)|$1|g;s|^\.$||'
}

[[ -f ~/.bash.colors ]] && . ~/.bash.colors

# Choose a unique color based on the hostname
# Inspired by http://zork.net/~st/jottings/Per-Host_Prompt_Colouring.html
# rgb2short function derived from https://gist.github.com/MicahElliott/719710
ssh_host_color() {  # Allows customizing the color generated by the script
    # Usage:
    # In ~/.ssh/config, put a commented Color entry for your hostname.
    # The color is a hex number representing HSL (HHSSLL)
    # Example:
    # Host mylaptop
    #   User myuser
    #   # Color 2d8ce7
    if command -v perl &>/dev/null; then
    perl -e 'sub walk{foreach my $file(@_){next if $seen{$file}++;open my $FH,"<",$file or next;
    while(<$FH>){if(/^\s*Include\s(.+)$/){walk(glob $1)}else{print}}}}walk(<~/.ssh/config>)'
    else cat ~/.ssh/config; fi |
    awk -v host="$1" 'BEGIN{x=1}END{exit x}
    tolower($1)=="host"{if(m)exit;for(i=2;i<=NF;i++){gsub(/[][().+^$]/,"\\\\&",$i);gsub(/[?]/,".",$i);gsub(/[*]/,".*",$i);if(host~"^"$i"$"&&$i!=".*")m=1}}
    m&&sub(/^[ \t]*#/,"",$0)&&tolower($1)=="color"&&tolower($2)~/[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]/{print$2;x=0;exit}'
}
HOSTBGCOLOR=$'\e[46m' # fallback to cyan background
HOSTFGCOLOR=$'\e[36m' # fallback to cyan foreground
HOSTBGTEXT=$'\e[40m'  # fallback to black background
HOSTFGTEXT=$'\e[30m'  # fallback to black foreground
HOSTHASH="$( name="$(uname -n | sed 's/\..*//')"; ssh_host_color "$name" 2>/dev/null || printf '%s\n' "$name" | if command -v md5sum &>/dev/null; then md5sum; else md5; fi )"
if command -v python &>/dev/null; then
{ IFS= read -r HOSTCOLORNUMBER; IFS= read -r HOSTTEXTNUMBER; } <<<"$(hosthash=${HOSTHASH:0:6} color_count=$(tput colors 2>/dev/null || echo 8) python -c '
import os
import colorsys
def linear_map(n, min, max, tmin, tmax):
    [n, min, max, tmin, tmax] = [float(i) for i in [n, min, max, tmin, tmax]]
    return (n - min)/(max - min) * (tmax - tmin) + tmin
hosthash = os.environ["hosthash"]
h = linear_map(int(hosthash[0:2], 16), 0, 0xff, 0, 1)
s = linear_map(int(hosthash[2:4], 16), 0, 0xff, 0.5, 1)
l = linear_map(int(hosthash[4:6], 16), 0, 0xff, 0.2, 0.8)
rgb = [0xff * i for i in colorsys.hls_to_rgb(h, l, s)]
cubelevels = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff]
snaps = [(x+y)/2 for x, y in list(zip(cubelevels, [0]+cubelevels))[1:]]
def rgb2short256(r, g, b):
    r, g, b = map(lambda x: len(tuple(s for s in snaps if s<x)), (r, g, b))
    return (r*36 + g*6 + b + 16,
        15 * (l < 108. / 0xff or (149. / 0xff < h < 192. / 0xff and l < 166. / 0xff)))
hues = [1, 3, 2, 6, 4, 5, 1]
def hl2short(h, l, color_count):
    h = hues[int(round(linear_map(h, 0, 1, 0, 6)))]
    color = h + 8 if l > .6 and color_count == 16 else h
    return color, (color == 4) * (((color_count != 8) * 8) + 7)
color_count = int(os.environ["color_count"])
colors = rgb2short256(*rgb) if color_count >= 256 else hl2short(h, l, color_count)
for c in colors: print(c)
')"
HOSTBGCOLOR=$(tput setab "$HOSTCOLORNUMBER" 2>/dev/null || printf '\e[48;5;%sm' "$HOSTCOLORNUMBER")
HOSTFGCOLOR=$(tput setaf "$HOSTCOLORNUMBER" 2>/dev/null || printf '\e[38;5;%sm' "$HOSTCOLORNUMBER")
HOSTBGTEXT=$(tput setab "$HOSTTEXTNUMBER" 2>/dev/null || printf '\e[48;5;%sm' "$HOSTTEXTNUMBER")
HOSTFGTEXT=$(tput setaf "$HOSTTEXTNUMBER" 2>/dev/null || printf '\e[38;5;%sm' "$HOSTTEXTNUMBER")
fi

if [[ $EUID == '0' ]]; then
    # running as root or with privileges
    PROMPT_ROOT_FLAG=$'\[\e[0;31;41m\]/\[\e[1;37m\]!\[\e[0;31;41m\]\\\\\[\e[0m\]'
    PROMPT_ROOT_FLAG_NO_COLOR='/!\\'
else
    PROMPT_ROOT_FLAG=''
    PROMPT_ROOT_FLAG_NO_COLOR=''
fi

ensure_prompt_on_own_line() {
    [[ -t 0 ]] && [[ -t 1 ]] || return 0
    local _ col
    IFS='[;' read -p $'\e[6n' -s -r -dR _ _ col # \e[6n is tput u7
    [[ "$col" -gt 1 ]] && printf '\e[7m%%\e[0m\n'

    # Alternative: (via https://www.vidarholen.net/contents/blog/?p=878)
    #printf "%%%$((COLUMNS-1))s\\r"
}

#PROMPT_COMMAND='history -a;printf "\e]0;%s\a" "$(pwd|perl -pe '"'"'s|^\Q$ENV{HOME}\E|~|;s|(?<=/)([._]*.)[^/]*(?=/)|$1|g;s|^\.$||'"'"')";ensure_prompt_on_own_line'
PROMPT_COMMAND='history -a;printf "\e]0;%s\a" "$(pws)";ensure_prompt_on_own_line'

PS1="$PROMPT_ROOT_FLAG\[$HOSTFGCOLOR$HOSTBGCOLOR\][\[$HOSTFGTEXT$HOSTBGCOLOR\]\u "$'\[\e[0;30m\e[47m\] \h\[\e[0;37m\e[47m\]]\[\e[0m\e[0;100m\e[37m\] \w \[\e[0m\]$(__git_info)\n\[\e[0m\e[1m\]\\$\[\e[0m\] '  # full color + git info
#PS1=$'\[\e[0m\e[1m\]'"$PROMPT_ROOT_FLAG_NO_COLOR"$'\u@\h:\w$(__git_info)\n\$ \[\e[0m\]'  # bold + git info
#PS1=$'\u@\h:\w\n\$ '  # basic

__git_info() {
    local message branch on_branch remote detached_tag detached_from tracking ahead behind gitstatus stashes stashes_exit stash_message staged_changes unstaged_changes

    local repo_info="$(command git rev-parse --verify --git-dir --is-inside-git-dir --is-bare-repository --is-inside-work-tree --show-toplevel --short=7 HEAD 2>/dev/null)"
    local rev_parse_exit_code="$?"
    [[ -z "$repo_info" ]] && return

    local short_sha=""
    if [[ "$rev_parse_exit_code" = "0" ]]; then
        # repository has commits (not empty)
        short_sha="${repo_info##*$'\n'}"
        repo_info="${repo_info%$'\n'*}"
    fi
    local toplevel="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local inside_worktree="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local bare_repo="${repo_info##*$'\n'}"
    repo_info="${repo_info%$'\n'*}"
    local inside_gitdir="${repo_info##*$'\n'}"
    local g="${repo_info%$'\n'*}"

    # On a branch?
    IFS='' read -r branch <"$g/HEAD"  # For bash in cygwin (not zsh), read is MUCH faster than branch="$(<"$g/HEAD")"
    [[ "$branch" = "ref: refs/heads/"* ]] && on_branch=true || on_branch=false
    branch="${branch#ref: refs/heads/}"
    #branch=$(command git symbolic-ref --short -q HEAD)

    if [[ "$inside_worktree" = "true" ]]; then
        unstaged_changes="$(command git diff-files --quiet || echo 'U')"
        if [[ "$rev_parse_exit_code" = "0" ]]; then
            staged_changes="$(command git diff-index --cached --quiet HEAD -- || echo 'S')"
        else
            # empty repository (no commits yet)
            # 4b825dc642cb6eb9a060e54bf8d69288fbee4904 is the git empty tree.
            staged_changes="$(command git diff-index --cached --quiet 4b825dc642cb6eb9a060e54bf8d69288fbee4904 2>/dev/null || echo 'S')"
        fi
    fi
    if [[ "$on_branch" = true ]]; then
        # On a remote-tracking branch?
        remote="$(command git rev-parse --verify --symbolic-full-name @{u} 2>/dev/null)"
        remote="${remote#refs/remotes/}"
        if [[ -n "${remote}" ]]; then
            IFS=$'\t' read -r ahead behind <<<"$(command git rev-list --left-right --count HEAD...@{u})"
            (( $ahead )) && gitstatus+="+${ahead}"
            (( $behind )) && gitstatus="${gitstatus:+$gitstatus/}-${behind}"
            tracking="[${remote}${gitstatus:+ ${gitstatus}}]"
        fi
    else
        detached_tag="$(command git describe --all --always 2>/dev/null)"
        detached_from="${detached_tag:-${short_sha}}"
        tracking="[detached from ${detached_from}]"
    fi
    stashes="$(command git rev-list --walk-reflogs --count refs/stash 2>/dev/null)"
    stashes_exit="$?"
    [[ "$stashes_exit" -eq 0 ]] && stash_message="(${stashes} stashed)"

    message="(git)"
    [[ -n "${short_sha}" ]] && message+=" ${short_sha}"
    [[ -n "${staged_changes}" ]] && message+=" ${staged_changes}"
    [[ -n "${unstaged_changes}" ]] && message+=" ${unstaged_changes}"
    [[ "$on_branch" = true ]] && message+=" ${branch}"
    [[ -n "${tracking}" ]] && message+=" ${tracking}"
    [[ -n "${stash_message}" ]] && message+=" ${stash_message}"
    echo -en "\n${message}"
}

monitorhttp() {
    if [[ -n "$1" ]]; then
        local port="$1"
    else
        echo >&2 "Usage: monitorhttp <port>"
        return 1
    fi
    local pcap_file="http_traffic_$(date +%F)-$(date +%s).pcap"
    local text_file="http_traffic_$(date +%F).log"
    sudo sh -c 'port="$1"; pcap_file="$2"; text_file="$3"
        stdbuf -oL -eL tcpdump -vv -l -i any -s 0 -w - "tcp port $port" |
          tee "$pcap_file" |
          stdbuf -oL -eL tcpdump -A -r - "((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0" |
          tee -a "$text_file"
    ' sh "$port" "$pcap_file" "$text_file"
}

#[[ -f ~/.bashrc.local ]] && . ~/.bashrc.local
