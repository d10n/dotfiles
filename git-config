#!/bin/bash
# Execute this script, or run individual lines you want. Don't symlink this to ~/.gitconfig.
set -x

# NeoBundle makes vim bork out when run as vi (which is git default)
#git config --global core.editor $(command -v vim)

# Find the branching point http://stackoverflow.com/a/4991675
git config --global alias.oldest-ancestor "!bash -c '"$'git log -1 "$(diff --old-line-format= --new-line-format= <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1)"'"' -"

# Sort branch by date
# Usage: git bd [-a] [-<line_limit>]
#     -a             include remote branches and tags
#     -<line_limit>  number of lines to tail
# Example: git bd
# Example: git bd -3
# Example: git bd -a
# Example: git bd -a -20
git config --global alias.bd '!f() {
    case "$1" in
        -a) refs="--"; shift;;
        -a*) refs="--"; one="${1/-a/-}"; shift; set -- "$one" "$@";;
        *) refs="refs/heads/";;
    esac;
    git for-each-ref --color --count=1 1>/dev/null 2>&1 && color_flag=yes;
    format="--format=%(refname) %00%(committerdate:format:%s)%(taggerdate:format:%s) %(color:red)%(committerdate:relative)%(taggerdate:relative)%(color:reset)%09%00%(color:yellow)%(refname:short)%(color:reset) %00%(subject)%00 %(color:reset)%(color:dim cyan)<%(color:reset)%(color:cyan)%(authorname)%(taggername)%(color:reset)%(color:dim cyan)>%(color:reset)";
    {
        {
            [ "$color_flag" = yes ] &&
                git for-each-ref --color "$format" "$refs" ||
                git -c color.ui=always for-each-ref "$format" "$refs";
        } |
            perl -ne "print unless /^refs\/stash /";
        [ "$refs" = "--" ] &&
            git show-ref -q --verify refs/stash &&
            git log --color --walk-reflogs --format="%gd %x00%ct %C(red)%cr%C(reset)%x09%x00%C(yellow)%gd%C(reset) %x00%s%x00 %C(reset)%C(dim cyan)<%C(reset)%C(cyan)%an%C(reset)%C(dim cyan)>%C(reset)" refs/stash;
    } |
        perl -pe "s/^refs\/tags\/[^\x00]*\x00([^\x00]*)\x00([^\x00]*)/\$1(tag) \$2/ || s/^[^\x00]*\x00([^\x00]*)\x00/\$1/; s/\x00([^\x00]{0,50})([^\x00]*)\x00/\$1\x1b[1;30m\$2\x1b[0m/" |
        sort -n -k1,1 |
        cut -d" " -f2- |
        tail "${@:--n+0}";
}; f'

# Short log
git config --global alias.l '!f() {
    commit_count="$(git rev-list --count HEAD@{upstream}~3..HEAD 2>/dev/null || echo 5)";
    [ "$commit_count" -lt 5 ] && commit_count=5;
    [ "$commit_count" -gt 20 ] && commit_count=20;
    git --no-pager log \
        --format="%C(auto)%h %C(reset)%C(dim red)[%C(reset)%C(red)%cr%C(reset)%C(dim red)]%C(reset)%C(auto) %x02%s%x03 %C(reset)%C(dim cyan)<%C(reset)%C(cyan)%an%C(reset)%C(dim cyan)>%C(reset)%C(auto)%d%C(reset)" \
        --color --graph "-$commit_count" "$@" |
        if command -v perl >/dev/null; then
            perl -pe "
                s/ seconds? ago/s/ ||
                s/ minutes? ago/m/ ||
                s/ hours? ago/h/ ||
                s/ days? ago/d/ ||
                s/ weeks? ago/w/ ||
                s/(\d+) years?, (\d+) months? ago/\$1y\$2m/ ||
                s/ months? ago/mo/ ||
                s/ years? ago/y/;
                s/([^\x1b]\[)(.*?)]/sprintf(\"%s%21s]\",\$1,\$2)/e;
                s/\x02([^\x03]{0,50})([^\x03]*)\x03/length \$2?\$1.\"\x1b[1;30m\".\$2:\$1/e
            ";
        else
            awk "{
                replaced=( \
                    sub(/ seconds? ago/,\"s\") ||
                    sub(/ minutes? ago/,\"m\") ||
                    sub(/ hours? ago/,\"h\") ||
                    sub(/ days? ago/,\"d\") ||
                    sub(/ weeks? ago/,\"w\") \
                );
                if (!replaced && \$0 ~ /[0-9]+ years?, [0-9]+ months? ago/) {
                    sub(/ years?, /,\"y\");
                    sub(/ months? ago/,\"m\");
                } else if (!replaced) {
                    sub(/ months? ago/,\"mo\") ||
                    sub(/ years? ago/,\"y\");
                }
                while (\$0 !~ /[^\\x1b]\\[[^]]{21}/) {
                    sub(/[^\\x1b]\\[/,\"& \");
                }
                if (\$0 ~ /\\x02[^\\x03]{51}.*\\x03/) {
                    sub(/\\x02.{50}/,\"&\\x1b\\[1;30m\");
                }
                sub(/\\x02/,\"\");
                sub(/\\x03/,\"\");
            }1";
        fi |
        less -RFX;
}; f'

# Full log graph
git config --global alias.lg "log --all --graph --format='%C(auto)%h %C(dim red)[%C(reset)%C(red)%cr%C(dim red)]%C(reset)%C(auto) %s %C(dim cyan)<%C(reset)%C(cyan)%an%C(dim cyan)>%C(reset)%C(auto)%d'%C(reset)"

# Short status
git config --global alias.s "status --short --branch"

# More readable diff
git config --global alias.d "diff --patience"

# Word diff
git config --global alias.dw "diff --word-diff=color"

# Diff staged
git config --global alias.ds "diff --patience --staged"

# Word diff staged
git config --global alias.dsw "diff --word-diff=color --staged"

# Show branches
git config --global alias.b "branch"

# Update both branches and tags
git config --global alias.f "!git fetch --all --prune 2>&1 | sed 's/^/branches: /'; git fetch --all --prune --tags 2>&1 | sed 's/^/tags: /'"

# Update both branches and tags, then pull.
git config --global alias.fp '!f() { git fetch --all --prune 2>&1 | sed "s/^/branches: /"; git fetch --all --prune --tags 2>&1 | sed "s/^/tags: /"; [ "$1" = "--rebase" ] && action=rebase || action=merge; git "$action" FETCH_HEAD; }; f'

# Pull
git config --global alias.p "pull"

# Merge
git config --global alias.m "merge"

# Rebase
git config --global alias.r "rebase"

# Grep with blame
git config --global alias.grep-blame "$(cat <<'EOF' | sed 's/^ *//'
!perl -e '
    my $truncate = 500;
    open grep_fh, "-|", "git", "grep", "-n", "--color", @ARGV;
    my $last_file; my @lines = (); my @texts = ();
    while (<grep_fh>) {
        if (/^Binary file .* matches$/) { print; next; }
        my ($file, $line, $text, $context_separator) = /^(.*?)(?:\e\[[^m]*m)[:-](?:\e\[[^m]*m)(.*?)(?:\e\[[^m]*m)[:-](?:\e\[[^m]*m)(.*)$|^(\e\[[^m]*m--\e\[[^m]*m)$/;
        if (defined($context_separator)) {
            do_blame() if (@lines);
            @lines = (); @texts = ();
            print $context_separator, "\n";
            next;
        }
        if ($file eq "") { print; next; }
        if (defined($last_file) && $file ne $last_file) {
            do_blame() if (@lines);
            @lines = (); @texts = ();
        }
        $last_file = $file; push @lines, $line; push @texts, $text;
    }
    do_blame() if (@lines);
    close grep_fh;
    exit $? >> 8;
    sub do_blame {
        open blame_fh, "-|", "git", "--no-pager", "blame", (map {"-L$_,$_"} @lines), "--", $last_file;
        while (<blame_fh>) {
            /^([^\)]*\))/;
            shift @lines;
            my $text = shift @texts;
            my $out = "$1 $last_file $text\n";
            if (length($out) > $truncate) {
                $out =~ s/^((?:\e\[[^m]*m(?:.|$)|.|$(*SKIP)(*FAIL)){$truncate})(?=(?:\e\[[^m]*m(?:.|$)|.|$(*SKIP)(*FAIL)){14}).*/$1\e\[m...(truncated)/;
            }
            print $out;
        }
        close blame_fh;
    }
' --
EOF
)"

# Subject length
git config --global alias.subject-length '!f() { git log -1 --format="%s" | tr -d "\n" | wc -m; }; f'

# Stash only staged changes
git config --global alias.stash-staged '!f() {
    staged="$(git diff --staged --unified=0)";
    unstaged="$(git diff --unified=0)";
    [ "$staged" = "" ] && return;
    [ "$unstaged" = "" ] && { git stash "$@"; return "$?"; };
    printf "This is a potentially destructive command.\nBe sure you understand it before running it.\nContinue? [y/N]: ";
    IFS= read -r cont; echo "$cont" | grep -iq "^y" || { echo "Not continuing."; return 1; };
    git reset --hard &&
        echo -E "$staged" | git apply --unidiff-zero - &&
        git stash "$@" &&
        echo -E "$unstaged" | git apply --unidiff-zero - || {
            top="$(git rev-parse --git-dir)";
            echo -E "$staged" >"$top/LAST_STAGED.diff";
            echo -E "$unstaged" >"$top/LAST_UNSTAGED.diff";
            printf "\x1b[0;31mERROR:\x1b[0m Could not stash staged.\nDiffs saved: try git apply --unidiff-zero .git/LAST_STAGED.diff .git/LAST_UNSTAGED.diff\n";
        };
}; f'

# Stash only unstaged changes
git config --global alias.stash-unstaged '!f() {
    staged="$(git diff --staged --unified=0)";
    unstaged="$(git diff --unified=0)";
    [ "$staged" = "" ] && { git stash "$@"; return "$?"; };
    [ "$unstaged" = "" ] && return;
    printf "This is a potentially destructive command.\nBe sure you understand it before running it.\nContinue? [y/N]: ";
    IFS= read -r cont; echo "$cont" | grep -iq "^y" || { echo "Not continuing."; return 1; };
    git reset --hard && echo -E "$unstaged" |
        git apply --unidiff-zero - &&
        git stash "$@" &&
        echo -E "$staged" | git apply --unidiff-zero - || {
            top="$(git rev-parse --git-dir)";
            echo -E "$staged" >"$top/LAST_STAGED.diff";
            echo -E "$unstaged" >"$top/LAST_UNSTAGED.diff";
            printf "\x1b[0;31mERROR:\x1b[0m Could not stash unstaged.\nDiffs saved: try git apply --unidiff-zero .git/LAST_STAGED.diff .git/LAST_UNSTAGED.diff\n";
        };
}; f'

# Press enter to view a stash's diff, q to exit the diff pager, and esc to exit fzf
git config --global alias.stash-browse '!f() {
    git rev-parse || return
    fzf="$(command -v fzf)"
    [ -z "$fzf" ] && [ -x ~/.fzf/bin/fzf ] && fzf=~/.fzf/bin/fzf
    [ -z "$fzf" ] && { printf >&2 "\e[0;31mgit stash-browse requires fzf to be installed\e[0m\n"; return 1; }
    git stash list --color=always \
        --format="%C(auto)%h %gd %C(dim red)[%C(reset)%C(red)%cr%C(dim red)]%C(reset) %C(auto)%<(70,trunc)%s %C(dim cyan)<%C(reset)%C(cyan)%an%C(dim cyan)>%C(reset)" |
        "$fzf" --ansi --no-sort --reverse --tiebreak=index \
        --bind "enter:execute: echo {} | sed \"s#\([a-f0-9]*\).*#\1#\" | head -1 |
        xargs -I % sh -c \"git show --patch --stat --color=always % | less -R\""
    return 0
}; f'

# Press enter to view a commit's diff, q to exit the diff pager, and esc to exit fzf
git config --global alias.browse '!f() {
    git rev-parse || return
    fzf="$(command -v fzf)"
    [ -z "$fzf" ] && [ -x ~/.fzf/bin/fzf ] && fzf=~/.fzf/bin/fzf
    [ -z "$fzf" ] && { printf >&2 "\e[0;31mgit browse requires fzf to be installed\e[0m\n"; return 1; }
    git log --graph --color=always \
        --format="%C(auto)%h %C(dim red)[%C(reset)%C(red)%cr%C(dim red)]%C(reset)%C(auto)%d %s %C(dim cyan)<%C(reset)%C(cyan)%an%C(dim cyan)>%C(reset)" "$@" |
        "$fzf" --ansi --no-sort --reverse --tiebreak=index \
        --bind "enter:execute: echo {} |
            sed \"s#^[* /|\-]*\([a-f0-9]*\).*#\1#\" | head -1 |
            xargs -I % sh -c \"git show -m --patch --stat --color=always % | less -R\""
    return 0
}; f'

# Highlight word differences in lines like GitHub
diff_highlight_found=''
if command -v diff-highlight &>/dev/null; then
    diff_highlight_found='diff-highlight'
elif [[ -x /usr/share/git/diff-highlight/diff-highlight ]]; then
    diff_highlight_found='/usr/share/git/diff-highlight/diff-highlight'
elif [[ -x /usr/share/doc/git/diff-highlight/diff-highlight ]]; then
    diff_highlight_found='/usr/share/doc/git/diff-highlight/diff-highlight'
fi
if [[ -n "$diff_highlight_found" ]]; then
    git config --global pager.log "$diff_highlight_found | less -RFX"
    git config --global pager.show "$diff_highlight_found | less -RFX"
    git config --global pager.diff "$diff_highlight_found | less -RFX"
fi

# Set a global gitignore file
git config --global core.excludesfile ~/.gitignore_global

# Add color to git output
git config --global color.ui auto

# Push only the current branch
git config --global push.default current

# Show the original code in merge conflicts
git config --global merge.conflictstyle diff3

# Show other changes when doing git pull --rebase
git config --global rebase.stat true

# Automatically set fixup and squash for commits made with --fixup and --squash
git config --global rebase.autoSquash true

# Enable git rerere
git config --global rerere.enabled true

# Fetch pull requests too
#git config --global --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"

# Show the patch by default with git stash show
git config --global stash.showPatch true

# Automatically stash and unstash before and after a rebase
git config --global rebase.autoStash true

# Do not try to guess user and email when committing
git config --global user.useConfigOnly true

# Show ref names in git log
git config --global log.decorate full

# Show all untracked files in git status, not just root directories
git config --global status.showUntrackedFiles all

# Verify transferred objects in exchange for slower transfer
# If you have errors cloning or fetching, use --config transfer.fsckObjects=false
#git config --global transfer.fsckObjects true
# (disable for now)
git config --global transfer.fsckObjects false

# easy git instaweb
git config --global instaweb.local true
git config --global instaweb.httpd webrick

# Fix git rebases on mac
# https://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
if [[ "$(uname)" = "Darwin" ]]; then
    git config --global core.trustctime false
fi

# Update sandbox branch
# Old, but maybe a useful reference for shell functions in git aliases
# * origin/master is merged into your branch
# * your branch is pushed to the sandbox
#git config --global alias.update-sandbox $'!f() ( set -euo pipefail; if [[ "$#" -ne 1 ]]; then echo "Usage: update-sandbox <sandbox-name>"; echo "Example: update-sandbox pear"; exit 1; fi; set -x; git fetch; git merge origin/master; git push origin "HEAD:$1" || { set +x; echo "Force push required. Press any key to continue or ctrl+c to abort: "; read; set -x; git push --force origin "HEAD:$1"; } ); f'

