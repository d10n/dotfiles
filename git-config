#!/bin/bash
# Execute this script, or run individual lines you want. Don't symlink this to ~/.gitconfig.
set -x

# NeoBundle makes vim bork out when run as vi (which is git default)
#git config --global core.editor $(command -v vim)

# Add a no-op alias just for tab completion
git config --global alias.cdroot 'echo You need the shell function for this to work'

# Find the branching point http://stackoverflow.com/a/4991675
git config --global alias.oldest-ancestor "!bash -c '"$'git log -1 "$(diff --old-line-format= --new-line-format= <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1)"'"' -"

# Sort branch by date
# Usage: git bs [-a] [-<line_limit>]
#     -a             include remote branches and tags
#     -<line_limit>  number of lines to tail
# Example: git bs
# Example: git bs -3
# Example: git bs -a
# Example: git bs -a -20
git config --global alias.bs $'!f() { [ "$1" = "-a" ] && shift && refs="--" || refs="refs/heads/"; git for-each-ref --color --count=1 1>/dev/null 2>&1 && color_flag=yes; format="--format=%(committerdate:raw)%(taggerdate:raw)%(color:red)%(committerdate:relative)%(taggerdate:relative)%(color:reset)\t%(color:yellow)%(refname:short)%(color:reset) %(subject) %(color:dim cyan)<%(color:reset)%(color:cyan)%(authorname)%(taggername)%(color:reset)%(color:dim cyan)>%(color:reset)"; { [ "$color_flag" = yes ] && git for-each-ref --color "$format" "$refs" || git -c color.ui=always for-each-ref "$format" "$refs"; } | sort -k1,1 | cut -c17- | if [ -n "$1" ]; then tail "$@"; else cat; fi; }; f'

# Short log
git config --global alias.l '!f() { git --no-pager log --color --graph --format="%C(auto)%h %C(reset)%C(dim red)[%C(reset)%C(red)%cr%C(reset)%C(dim red)]%C(reset)%C(auto) %x1e%s%x1e %C(reset)%C(dim cyan)<%C(reset)%C(cyan)%cn%C(reset)%C(dim cyan)>%C(reset)%C(auto)%d%C(reset)" -5 "$@" | perl -pe "s/ seconds? ago/s/ || s/ minutes? ago/m/ || s/ hours? ago/h/ || s/ days? ago/d/ || s/ weeks? ago/w/ || s/(\d+) years?, (\d+) months? ago/\1y\2m/ || s/ months? ago/mo/ || s/ years? ago/y/; s/([^\x1b]\[)(.*?)]/sprintf(\"%s%21s]\",\$1,\$2)/e; s/\x1e([^\x1e]{0,50})([^\x1e]*)\x1e/\$1\x1b[1;30m\$2/" | less -RFX; }; f'

# Full log graph
git config --global alias.lg "log --all --graph --format='%C(auto)%h %C(dim red)[%C(reset)%C(red)%cr%C(dim red)]%C(reset)%C(auto)%d %s %C(dim cyan)<%C(reset)%C(cyan)%cn%C(dim cyan)>%C(reset)'"

# Short status
git config --global alias.s "status -s"

# More readable diff
git config --global alias.d "diff --patience"

# Diff staged
git config --global alias.ds "diff --patience --staged"

# Show branches
git config --global alias.b "branch"

# Update both branches and tags
git config --global alias.f "!git fetch --all --prune 2>&1 | sed 's/^/branches: /'; git fetch --all --prune --tags 2>&1 | sed 's/^/tags: /'"

# Update both branches and tags, then pull.
git config --global alias.fp '!f() { git fetch --all --prune 2>&1 | sed "s/^/branches: /"; git fetch --all --prune --tags 2>&1 | sed "s/^/tags: /"; [[ "$1" = "--rebase" ]] && action=rebase || action=merge; git "$action" FETCH_HEAD; }; f'

# Set a global gitignore file
git config --global core.excludesfile ~/.gitignore_global

# Add color to git output
git config --global color.ui auto

# Push only the current branch
git config --global push.default current

# Show the original code in merge conflicts
git config --global merge.conflictstyle diff3

# Show other changes when doing git pull --rebase
git config --global rebase.stat true

# Automatically set fixup and squash for commits made with --fixup and --squash
git config --global rebase.autoSquash true

# Enable git rerere
git config --global rerere.enabled true

# Fetch pull requests too
#git config --global --add remote.origin.fetch "+refs/pull/*/head:refs/remotes/origin/pr/*"

# Show the patch by default with git stash show
git config --global stash.showPatch true

# Automatically stash and unstash before and after a rebase
git config --global rebase.autoStash true

# Show ref names in git log
git config --global log.decorate full

# Show all untracked files in git status, not just root directories
git config --global status.showUntrackedFiles all

# Verify transferred objects in exchange for slower transfer
# If you have errors cloning or fetching, use --config transfer.fsckObjects=false
#git config --global transfer.fsckObjects true
# (disable for now)
git config --global transfer.fsckObjects false

# easy git instaweb
git config --global instaweb.local true
git config --global instaweb.httpd webrick

# Fix git rebases on mac
# https://www.git-tower.com/blog/make-git-rebase-safe-on-osx/
if [[ "$(uname)" = "Darwin" ]]; then
    git config --global core.trustctime false
fi

# Update sandbox branch
# Old, but maybe a useful reference for shell functions in git aliases
# * origin/master is merged into your branch
# * your branch is pushed to the sandbox
#git config --global alias.update-sandbox $'!f() ( set -euo pipefail; if [[ "$#" -ne 1 ]]; then echo "Usage: update-sandbox <sandbox-name>"; echo "Example: update-sandbox pear"; exit 1; fi; set -x; git fetch; git merge origin/master; git push origin "HEAD:$1" || { set +x; echo "Force push required. Press any key to continue or ctrl+c to abort: "; read; set -x; git push --force origin "HEAD:$1"; } ); f'

